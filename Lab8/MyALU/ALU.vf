////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : ALU.vf
// /___/   /\     Timestamp : 11/11/2023 22:43:01
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family kintex7 -verilog C:/Users/16579/Desktop/practice/Lab8/MyALU1/MyALU/ALU.vf -w C:/Users/16579/Desktop/practice/Lab8/MyALU1/MyALU/ALU.sch
//Design Name: ALU
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module AddSub1b_MUSER_ALU(A, 
                          B, 
                          Ci, 
                          Ctrl, 
                          Co, 
                          S);

    input A;
    input B;
    input Ci;
    input Ctrl;
   output Co;
   output S;
   
   wire XLXN_2;
   
   Adder1b  XLXI_1 (.A(A), 
                   .B(XLXN_2), 
                   .Ci(Ci), 
                   .Co(Co), 
                   .S(S));
   XOR2  XLXI_2 (.I0(Ctrl), 
                .I1(B), 
                .O(XLXN_2));
endmodule
`timescale 1ns / 1ps

module AddSub4b_MUSER_ALU(A, 
                          B, 
                          Ctrl, 
                          Co, 
                          S);

    input [3:0] A;
    input [3:0] B;
    input Ctrl;
   output Co;
   output [3:0] S;
   
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_16;
   
   AddSub1b_MUSER_ALU  XLXI_1 (.A(A[0]), 
                              .B(B[0]), 
                              .Ci(Ctrl), 
                              .Ctrl(Ctrl), 
                              .Co(XLXN_13), 
                              .S(S[0]));
   AddSub1b_MUSER_ALU  XLXI_2 (.A(A[1]), 
                              .B(B[1]), 
                              .Ci(XLXN_13), 
                              .Ctrl(Ctrl), 
                              .Co(XLXN_14), 
                              .S(S[1]));
   AddSub1b_MUSER_ALU  XLXI_3 (.A(A[2]), 
                              .B(B[2]), 
                              .Ci(XLXN_14), 
                              .Ctrl(Ctrl), 
                              .Co(XLXN_16), 
                              .S(S[2]));
   AddSub1b_MUSER_ALU  XLXI_4 (.A(A[3]), 
                              .B(B[3]), 
                              .Ci(XLXN_16), 
                              .Ctrl(Ctrl), 
                              .Co(Co), 
                              .S(S[3]));
endmodule
`timescale 1ns / 1ps

module ALU(A, 
           B, 
           S, 
           C, 
           Co);

    input [3:0] A;
    input [3:0] B;
    input [1:0] S;
   output [3:0] C;
   output Co;
   
   wire [3:0] XLXN_10;
   wire [3:0] XLXN_11;
   wire [3:0] XLXN_12;
   wire XLXN_15;
   wire XLXN_16;
   
   Mux4to1  XLXI_4 (.I0(XLXN_15), 
                   .I1(XLXN_15), 
                   .I2(XLXN_16), 
                   .I3(XLXN_16), 
                   .S(S[1:0]), 
                   .o(Co));
   MyAnd2b4  XLXI_6 (.A(A[3:0]), 
                    .B(B[3:0]), 
                    .S(XLXN_11[3:0]));
   MyOr2b4  XLXI_7 (.A(A[3:0]), 
                   .B(B[3:0]), 
                   .S(XLXN_12[3:0]));
   GND  XLXI_8 (.G(XLXN_16));
   AddSub4b_MUSER_ALU  XLXI_9 (.A(A[3:0]), 
                              .B(B[3:0]), 
                              .Ctrl(S[0]), 
                              .Co(XLXN_15), 
                              .S(XLXN_10[3:0]));
   Mux4to1b4  XLXI_10 (.I0(XLXN_10[3:0]), 
                      .I1(XLXN_10[3:0]), 
                      .I2(XLXN_11[3:0]), 
                      .I3(XLXN_12[3:0]), 
                      .S(S[1:0]), 
                      .o(C[3:0]));
endmodule
